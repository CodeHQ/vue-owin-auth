import axios from 'axios';

export default {
  created() {
    // init aurora
    this.$log.debug('aurora init');
    const self = this;

    function setupHttp(val) {
      // setup axios
      self.$http.defaults.headers.common.Authorization = `Bearer ${val.access_token}`;
      axios.defaults.headers.common.Authorization = `Bearer ${val.access_token}`;
    }

    this.$auroraHub.$on('user.loggedIn', (auth) => {
      setupHttp(auth);
      this.$store.dispatch('aurora/setAuth', this.$auth.authentication);
    });

    this.$auroraHub.$on('user.unauthorized', () => {
      this.$auth.logout();
      window.location = '/login';
    });
    // initialize auth
    if (this.$root.$auth && this.$root.$auth.authentication) {
      setupHttp(this.$root.$auth.authentication);
      this.$root.$store.dispatch('aurora/setAuth', this.$root.$auth.authentication);
    }
    // setup errors
    this.$root.$http.interceptors.response.use((config) => {
      this.$auroraHub.$emit('app.loading');
      return config;
    }, (error) => {
      const err = {
        statusCode: error.response.status,
        message: error.response.data.Message,
      };
      this.$auroraHub.$emit('app.error', err);
      return Promise.reject(error);
    });

    // setup auth
    if (this.$auth && this.$auth.authentication) {
      this.$store.dispatch('aurora/setAuth', this.$auth.authentication);
    }

    this.$auroraHub.$on('network.error', (err) => {
      this.$log.error(err);
      this.$store.commit('isLoading', false);
      if (err.statusCode === 401) {
        this.$log.info('unauthorized, redirecting to login');
        window.location.href = '/login';
      } else {
        this.$log.error(`Status Code: ${err.statusCode}`);
        this.$log.error(err);
        if (!this.errorShown) {
          this.errorShown = true;
          // if (err.statusCode === 400) {
          //   snackbar.show({ text: err.message });
          // } else {
          // eslint-disable-next-line max-len
          //   snackbar.show({ text: 'There was a problem communicating with the server, please refresh and try again' });
          // }
          this.errorShown = false;
        }
      }
    });
    this.$router.beforeEach((to, from, next) => {
      // setup auth redirect
      if (to.matched.some(record => record.meta.auth)) {
        if (!this.$auth.authentication) {
          next({
            path: '/login',
            query: { redirect: to.fullPath },
          });
        } else {
          next();
        }
      } else {
        next();
      }
    });
    this.$http.interceptors.response.use((response) => {
      this.$auroraHub.$emit('app.loaded');
      return response;
    }, (error) => {
      const err = {
        statusCode: error.response.status,
        message: error.response.data.Message,
      };
      this.$auroraHub.$emit('app.error', err);
      return Promise.reject(error);
    });
    this.$log.debug('Application loaded');
  },
  /**
   * checks if the user is logged in and then redirects to the login page if the user is not.
   */
  // mounted() {
  //   if (!this.isLoggedIn) {
  //     this.$router.push('/login');
  //   } else {
  //     this.loadUserAccount();
  //   }
  // },
};